静态多态是在 编译期 确定调用目标的方法实现，通常通过template+static_case实现。它避免了运行时多态的虚表查找开销，实现更高效的多态行为。
1.	关键机制：
•	使用模板在编译期绑定派生类的具体实现。
•	通过 static_cast 将基类指针 this 转换为派生类指针，调用派生类的方法。

示例：
// 静态多态
template<typename T>
class Base {
public:
    T *getPtr() {
        // 将基类指针转换为派生类指针
        return static_cast<T *>(this);
    }

    void exe() {
        cout << "Base::exe()" << endl;
    }
};

class Sub1 : public Base<Sub1> {
public:
    void exe() {
        cout << "Sub1::exe()" << endl;
    }
};

class Sub2 : public Base<Sub2> {
};

int main(int argc, char *argv[]) {
    Base<Sub1> b1;
    b1.getPtr()->exe();

    Base<Sub2> b2;
    b2.getPtr()->exe();
    return 0;
}

静态多态和动态多态的区别
特性	            静态多态（CRTP）	                运行时多态
绑定时间	        编译期确定	                    运行时动态确定
动态类型切换	    不支持	                        支持
灵活性	        类型固定，缺乏动态行为支持	        支持多种动态行为
性能	            性能更高，无虚表查找开销	        性能略低，依赖虚表查找
类型安全	        编译期类型检查，避免类型错误	        运行时可能引发类型错误
适用场景	        性能敏感、行为固定的场景	        类型动态变化、行为不固定的场景

适用场景：
	•	性能敏感的场景：如数学计算库、序列化框架等无需动态类型切换的场景。
	•	编译期行为已确定：如游戏开发中固定行为的模块。

由于缺乏灵活性，无法实现常规多态那样的动态分派
template<typename Sub>
class Base {
    // 省略方法func和funcImpl
};

class Sub1 : public Base<Sub1> {
// 重写funcImpl
};
class Sub2 : public Base<Sub2> {
// 重写funcImpl
};

void execute(Base<Sub1>* obj) {
    obj->func();  // 无法实现动态分派，因为 obj 的类型已固定
}

int main() {
    Base<Sub1> b;
    execute(&b);  // 静态多态中，行为已在编译期确定
    return 0;
}

无法动态切换： execute 函数无法接收多个不同派生类的对象，因为模板实例化时类型已固定。

从错误信息 “Cannot substitute template argument Base for type template parameter T” 看，
这个问题的原因是你试图将模板类 Base 作为模板参数传递给自己，但 Base 的模板参数要求是某种类型，而不是它自身的模板实例化。
假设你定义的 Base 类如下：
template<typename T>
class Base {
public:
    void exe() {
        // some implementation
    }
};
然后你试图传递 Base<Base> 作为类型参数，例如：
void exe(Base<Base> base) {
    base.exe();
}
问题是：
	1.	Base 是一个模板类，Base<Base> 的语义不合法。
	2.	Base 的模板参数 T 必须是一个类型，而不是一个模板类实例化自身。