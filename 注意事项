静态变量类型	       定义位置	             作用范围	                    使用方法	                  赋值方式
全局静态变量	    文件内（函数、类外）	      定义所在的文件	                 文件内直接使用	         定义时初始化一次
类的静态成员变量	类内声明，类外定义	          类共享，所有对象共享同一份	     类名::变量名 或对象访问	 类外定义时初始化
局部静态变量	         函数内	              仅函数内部可见，生命周期贯穿程序	 函数内直接使用	         第一次调用时初始化一次
静态变量的生命周期与程序生命周期一致

c++中struct和class的功能几乎是一致的，仅仅只是访问修饰符的区别，但struct在实际开发过程中更多是用于实现贫血模型，而不会定义复杂行为。
struct一般是定义在头文件中。

数组：
在 C++ 中，是否使用 delete 或 delete[] 完全取决于是否使用了 new 或 new[]，而不是取决于变量本身是不是一个数组。
在 C++ 中，动态数组的元素不能是引用，只能是对象和指针
指针数组的定义：数组和数组元素都是指针类型 int **a = new int *[]{new int(1), new int(2)};
数组可以分为：静态数组（指针数组和非指针数组）和动态数组（指针数组和非指针数组）

& 的含义取决于它的上下文
用作声明时，& 表示引用类型，意味着这个变量是另一个变量的别名。
用作运算时，& 表示取地址运算符，即获取变量的内存地址（返回指针类型）。

指针：
指针既可以在栈上分配，也可以在堆上分配,int *a = &b; 和 int *a = new int(10); 都是指针类型
