c++数组
c++数组由【静态数组】和【动态数组】2部分构成，其中根据数组的元素类型又可以分为【指针数组】和【非指针数组】。
数组示例：
{
    // 静态数组
    int arr1[5] = {1, 2, 3, 4, 5};
    // 手动获取原始数组的长度
    auto size = sizeof(arr1) / sizeof(int);
    // 动态数组
    int *arr2 = new int[5];

    // 遍历数组
    for (int i = 0; i < size; ++i) {
        arr2[i] = arr1[i];
        cout << arr2[i] << endl;
    }
    delete[] arr2;
}
原始数组是没有提供长度字段或者函数的，需要手动进行计算。

【静态数组】和【动态数组】的区别：
1、内存分配不同：静态数组在栈上分配，动态数组在堆上分配；
2、数组大小确定方式不同：静态数组大小在编译期确定，动态数组的大小在运行期确定；
3、生命周期不同：静态数组退出作用域的时就销毁，动态数组则需要手动使用delete/delete[]进行释放；
4、变量类型不同：动态数组是指针类型变量，静态数组是值类型变量；

指针数组
当数组元素是指针类型的变量时，我们将这样的数组称之为【指针数组】，对于静态类型的数组，数组指针称之为【静态指针数组】，而动态类型的数组，数组指针称之为【动态指针数组】
指针数组示例：
{
    // 静态指针数组
    {
        int *arr1[2] = {new int(1), new int(2)};
        // 释放静态指针数组的数组元素
        delete arr1[0];
        delete arr1[1];

        int a = 1, b = 2;
        int *arr2[2] = {&a, &b};
    }
    // 动态指针数组
    {
        int **arr1 = new int *[2]{new int(1), new int(2)};
        // 释放动态指针数组的数组元素和数组本身
        delete arr1[0];
        delete arr1[1];
        delete[] arr1;

        int a = 1, b = 2;
        int **arr2 = new int *[2]{&a, &b};
        // 由于a和b是栈变量，并不是动态分配的，所以不需要也不能使用delete进行释放
        delete[] arr2;
    }
}
释放静态指针数组时，如果数组元素是动态分配的，只需要delete数组元素即可；而释放动态指针数组时，如果数组元素是动态分配的，除了需要delete数组元素外，还需要delete[]数组本身，因为动态指针数组本身也是一个分配在堆上的指针类型。

对象切片问题
非指针数组会引起对象切片问题，导致对象失去多态等特性
示例代码：
{
    class Base {
    public:
        virtual void print() {
            cout << "Base::print()" << endl;
        }
    };
    class Sub : public Base {
    public:
        void print() override{
            cout << "Sub::print()" << endl;
        }
    };

    // 非指针数组会引起对象切片问题导致丢失多态特性
    Base base1[1] = {Sub()};
    base1[0].print();

    // 指针数组则不会引起对象切片问题
    Base *base2 = {new Sub()};
    base2->print();
}
输出结果：
Base::print()
Sub::print()